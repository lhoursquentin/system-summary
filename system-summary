#!/bin/sh

# TODO
# cpu/load
# separator-color

usage() {
  cat <<EOF
Usage: ${0##*/} [options]

Options:
  -h,--help
  -c,--color <auto|never|always|pango>
  -s,--separator <separator>
EOF
  exit "${1-0}"
}

color_mode=auto
separator='
'

nb_args="$#"
while [ "$nb_args" -gt 0 ]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    -c|--color)
      shift; nb_args="$((nb_args - 1))"
			case "$1" in
        auto|never|always|pango)
          color_mode="$1"
          ;;
        *)
          usage 1 >&2
          ;;
      esac
      ;;
    -s|--separator)
      shift; nb_args="$((nb_args - 1))"
      if [ "$#" -eq 0 ]; then
        usage 1 >&2
      fi
      separator="$1"
      ;;
    -?|--*)
      usage 1 >&2
      ;;
  esac
  shift; nb_args="$((nb_args - 1))"
done

if [ "$color_mode" = auto ]; then
  if [ -t 1 ]; then
    color_mode=always
  else
    color_mode=never
  fi
fi

case "$color_mode" in
  never)
    color () {
      color_format=%s
    }
    ;;
  always)
    color() {
      case "$1" in
        black) term_value=0 ;;
        red) term_value=1 ;;
        green) term_value=2 ;;
        yellow) term_value=3 ;;
        blue) term_value=4 ;;
        magenta) term_value=5 ;;
        cyan) term_value=6 ;;
        white) term_value=7 ;;
      esac
      color_format='\033[0;3'"$term_value"'m%s\033[0m'
    }
    ;;
  pango)
    color() {
      # no handling for html content in $2
      color_format='<span foreground="'"$1"'">%s</span>'
    }
    ;;
esac

color_value() {
  value="$1"
  shift
  while [ "$#" -gt 1 ]; do
    threshold="$1"
    color="$2"
    shift 2
    if [ "$value" -gt "$threshold" ]; then
      color "$color"
      return;
    fi
  done
  color "$1"
}

print_result() {
  format=''
  nb_args="$#"
  while [ "$nb_args" -gt 0 ]; do
    output="$("$1")"
    if [ -n "$output" ]; then
      format="$format%s%s"
      set -- "$@" "$separator" "$output"
    fi
    shift; nb_args="$((nb_args - 1))"
  done
  shift # remove leading separator
  # Print once to prevent some utilities such as swaybar to display partial
  # content
  printf "$format"'\n' "$@"
}

show_network_connections() {
  nmcli --get-values NAME --color no connection show --active |
    sed '
      :start
      $!{
        N
        b start
      }
      s/\n/ + /g
    '
}

show_wifi_link_quality() {
  for wireless_path in /sys/class/net/*/wireless; do
    if [ "$wireless_path" = '/sys/class/net/*/wireless' ]; then
      echo no wifi card >&2
      return 1
    fi
    device_path="${wireless_path%/wireless}"
    device_name="${device_path##*/}"
    link_quality="$(($(
      iwconfig "$device_name" |
      sed -n 's/.*Link Quality=\([0-9]*\)\/\([0-9]*\).*/\1*100\/\2/p'
    )))"

    if [ -z "$link_quality" ]; then
      continue
    fi

    printf '%s: ' "$device_name"

    color_value "$link_quality" \
      70 green \
      40 yellow \
         red
    printf "$color_format" "$link_quality"%
  done
}

show_time_and_date() {
  date +'%H:%M:%S %d/%m/%Y'
}

show_fan_speed() {
  printf fans:
  for fan in /sys/class/hwmon/*/fan?_input; do
    printf ' '
    if [ "$fan" = '/sys/class/hwmon/*/fan?_input' ]; then
      echo no fan >&2
      return 1
    fi
    read fan_rpm < "$fan"
    color_value "$fan_rpm" \
      3000 red \
      0 yellow \
        white
    printf "$color_format" "$fan_rpm"
  done
  echo
}

show_home_disk_usage() {
  printf 'home: '
  df /home -h --output=used,size,pcent | {
    read header
    read used size pcent
    color_value "${pcent%\%}" \
      90 red \
      70 yellow \
         white
    printf "$color_format" "$used/$size"
  }
}

show_battery_status() {
  read status < /sys/class/power_supply/BAT0/status
  read capacity < /sys/class/power_supply/BAT0/capacity
  printf 'bat: '

  if [ "$status" = 'Discharging' ]; then
    color_value "$capacity" \
      80 green \
      40 white \
      10 yellow \
         red
  else
    color magenta
  fi
  printf "$color_format" "$capacity"%
}

show_volume() {
  amixer get Master |
    sed -n '
      /\[/{
        # delete everything up to [
        s/[^[]*//
        # remove square brackets
        s/[][]//g
        # format output for read
        s/%//
        s/on/true/
        s/off/false/
        p
        q
      }
    ' | {
      read volume enabled
      printf 'vol: '
      if ! "$enabled"; then
        color yellow
        printf "$color_format" "$volume"%
      else
        printf %s "$volume"%
      fi
    }
}

show_bluetooth_connections() {
  devices="$(
    bluetoothctl -- info |
      sed -n '
        /^[[:blank:]]*Name: /{
          s///
          H
        }
        ${
          g
          s/.//
          s/\n/ + /g
          p
        }
      '
  )"
  if [ -n "$devices" ]; then
    color blue
    printf "$color_format" "$devices"
  fi
}

show_usb_devices() {
  new-usb |
    sed -n '
      /.*ID [[:alnum:]]*:[[:alnum:]]* /{
        s///
        H
      }
      ${
        g
        s/.//
        s/\n/ + /g
        p
      }
    '
}

show_top_cpu() {
  ps axk pcpu o comm,pcpu | tail -n 1 | {
    read process percent
    percent="${percent%.*}"
    color_value "$percent" \
      50 red \
      10 yellow \
      5  white \
         green
    printf '%s: '"$color_format" "$process" "$percent"%
  }
}

show_backlight() {
  brightness_values="$(cat \
    /sys/class/backlight/*/brightness \
    /sys/class/backlight/*/max_brightness
  )"
  # can we do less readable please?
  printf 'backlight: %s\n' "$((${brightness_values%
*} * 100 / ${brightness_values#*
}))"
}

print_result \
  show_bluetooth_connections \
  show_usb_devices \
  show_top_cpu \
  show_network_connections \
  show_wifi_link_quality \
  show_fan_speed \
  show_backlight \
  show_volume \
  show_battery_status \
  show_home_disk_usage \
  show_time_and_date \

# keep above line blank
